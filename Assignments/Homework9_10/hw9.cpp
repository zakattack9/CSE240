
//CSE240 Fall 2019 HW9
// Zak Sakata
// Programming environment used: g++


// READ BEFORE YOU START:
// You are given a partially completed program that creates a list of employees.
// Each employee has name, number of years and department type (HR or IT).
// This information is stored as an object of Employee class. Class defined in employee.h
// The classes HR and IT are child classes of the Employee class.
// When adding a new employee, these child classes are used to make the employee node of the list.
// So each node in the list is actually an object of either HR or IT class.

//
// To begin, you should trace through the given code and understand how it works.
// Please read the instructions above each required function and follow the directions carefully.
// Do not modify given code.

// You can assume that all input is valid:
// Valid name:	String containing alphabetical letters
// Valid number: a positive integer

#include <iostream>
#include <fstream>
#include <string>
#include "Container.h"
#include "employee.h"
#include "it.h"
#include "hr.h"

using namespace std;

// functions already implemented:
void executeAction(char c);
Employee* searchEmployee(string name_input);


// functions that need implementation:
void addEmployee(string name_input, int years_input, departmentType type);			// 7 points
void displayList();							// 2 points
void minExp();                                                      // 3 points
void save(string fileName);					// 7 points
void load(string fileName);					// 7 points

Container* list = NULL;				// global list

int main()
{
	char c = 'i';				// initialized to a dummy value

  // During first execution, there will be no list.txt in source directory. list.txt is generated by save() while exiting the program.
	load("list.txt");			
	do {
		cout << "\nCSE240 HW9\n";
		cout << "Please enter your selection:\n";
		cout << "\t a: add a new employee\n";
		cout << "\t d: display employee list\n";
		cout << "\t c: change experience length(no of years) of a employee\n";
		cout << "\t m: display employees with a minimum (no of years) experience\n";
		cout << "\t q: quit\n";
		cin >> c;
		cin.ignore();
		executeAction(c);
	} while (c != 'q');

	save("list.txt");

	list = NULL;

	return 0;
}

// Ask for details from user for the given selection and perform that action
// Read the function case by case
void executeAction(char c)
{
	string name_input;
	int years_input;
	int type_input = 2;
	departmentType type;
	Employee* employeeResult = NULL;

	switch (c)
	{
	case 'a':	// add employee
				// input employee details from user
		cout << endl << "Enter employee name: ";
		getline(cin, name_input);
		cout << "Enter (experience length) number of years: ";
		cin >> years_input;
		cin.ignore();

		while (!(type_input == 0 || type_input == 1))
		{
			cout << "Enter department type: " << endl;
			cout << "0. HR " << endl;
			cout << "1. IT" << endl;
			cin >> type_input;
			cin.ignore();
		}
		type = (departmentType)type_input;

		// searchEmployee() will return the employee object if found, else returns NULL
		employeeResult = searchEmployee(name_input);
		if (employeeResult == NULL)
		{
			addEmployee(name_input, years_input, type);
			cout << endl << "Employee added to list!" << endl << endl;
		}
		else
			cout << endl << "Employee already present in the list!" << endl << endl;

		break;

	case 'd':		// display the list
		displayList();
		break;

	case 'c':		// change number of years
		cout << endl << "Enter employee name: ";
		getline(cin, name_input);
		// searchEmployee() will return the employee node if found, else returns NULL
		employeeResult = searchEmployee(name_input);
		if (employeeResult == NULL)
		{
			cout << endl << "Employee not in list!" << endl << endl;
		}
		else
		{
			// if employee exists in the list, then ask user for new number of years
			cout << endl << "Enter new number of years: ";
			cin >> years_input;
			cin.ignore();

			// Q3c Call changeNoOfYears() here   (1 point)
			// 'employeeResult' contains the employee whose 'years' is to be changed.
			// 'years_input' contains the new years of the employee.
			// Call the function with appropriate arguments.
			employeeResult->changeNoOfYears(employeeResult, years_input);

			cout << endl << "Number of years changed!" << endl << endl;
		}
		break;
	case 'm':
		minExp();		// employees with minimum experience
		break;
	case 'q':		// quit
		break;

	default: cout << c << " is invalid input!\n";
	}

}

// No implementation needed here, however it may be helpful to review this function
Employee* searchEmployee(string name_input)
{

	Container* tempList = list;			// work on a copy of 'list'

	while (tempList != NULL)			// parse till end of list
	{
		if (tempList->employee->getName() == name_input)
		{
			return tempList->employee;	// return the employee if found
		}

		tempList = tempList->next;		// parse the list
	}

	return NULL;						// return NULL if employee not found in list
}

// Q3b: Define Friend Function changeNoOfYears()  (3 points)
// Define the function changeNoOfYears()that is declared in employee.h file.
// This function sets the new 'years' of the employee. The employee object and new number of years is to be passed as function arguments.
// Use 'd' display option after using 'c' option to verify.
// You will need to implement add() and displayList() before you test this function.
void Employee::changeNoOfYears(Employee *employee, int noOfYears) {
	employee->years = noOfYears;
}


// Q4: addEmployee  (7 points)
// This function is used to add a new employee to the global linked list 'list'. You may add the new employee to head or tail of the list. (Sample solution adds to tail)
// departmentType 'type' can be IT or HR. You will need to use the function argument �type� to determine which constructor to use to create new employee node.
// For example, if the user enters type as 'IT', then you need to use IT class and constructor to create new employee node and add it to the list.
// NOTE: In executeAction(), searchEmployee() is called before this function. Therefore no need to check here if the employee exists in the list.
//       See how this function is called in case 'a' of executeAction()

void addEmployee(string name_input, int years_input, departmentType type) 
{
	// add employee to head of linked list
	Container* newEmployee = new Container();
	Employee* employee;
	
	if (type == hr) employee = new HR(name_input, years_input, type);
	else if (type == it) employee = new IT(name_input, years_input, type);

	newEmployee->employee = employee;
	newEmployee->next = list;
	list = newEmployee;
}

// Q5: displayList	(2 points)
// This function displays the list ofemployee and their details (name, years, department name)
// Parse the list and use the class member function to display the employee info.
// See expected output in the question file.


void displayList()
{
	Container *tempList = list;			// work on a copy of 'list'
	while(tempList != 0) {
		tempList->employee->displayEmployee();
		tempList = tempList->next;
	}
}

// Q6: minExp	( 3 points) 
// This function displays the list of employee and their details (name, years, department name)
// It takes the minimum number of years as input from the user and parse the list and use the class member function to display the employee info based on the condition.
// See expected output in the question file.

void minExp()
{
	Container* tempList = list; // work on a copy of list
	int minYears_input;

	cout << endl << "Enter the minimum years of experience: ";
	cin >> minYears_input;
	cin.ignore();

	while(tempList != 0) {
		if (tempList->employee->getYears() >= minYears_input) {
			tempList->employee->displayEmployee();
		}
		tempList = tempList->next;
	}
}
// Q6: save  (7 points)
// Save the linked list of employees to a file list.txt using ofstream.
// You will need to save the number of employees in linked list. That will help in load() when reading the file.
// One format to store is:
// <no. of employees>
// <Employee1 name>
// <Employee1 years>
// <Employee1 dept>
// <Employee2 name>
// <Employee2 years>
// <Employee2 dept>
// and so on..
// You may store the list in another format if you wish. You need to read the file in load () the same way that it is saved in save().
// This function is called when exiting the program (end of main() ).
// Hint: You may want to cast the enum �departmentType� to an int before writing it to the file.


void save(string fileName)
{
	ofstream saveFile;

	saveFile.open(fileName);
	if(saveFile.is_open()) {
		// loop through linked list and save name, years, department each to a new line in file
		Container* tempList = list;
		while(tempList != 0) {
			saveFile << tempList->employee->getName() << endl;
			saveFile << tempList->employee->getYears() << endl;
			saveFile << tempList->employee->getDepartmentType() << endl;
			tempList = tempList->next;
		}
		saveFile.close();
	} 
}

// Q7: load (7 points)
// Load the linked list of employees from the file using ifstream.
// You will need to create the linked list in the same order that is was saved to the file in save().
// First, read the number of employees saved in the file.
// Then, for every employee you will need to create a new Employee node depending on employee type. You may add the employee to head or tail of the list. 
// Hint: If you casted the enum 'departmentType' to an int, you will need to cast it back to 'departmentType' when making the employee node.
// This function is called at the beginning of main().

void load(string fileName)
{
	ifstream loadFile;

	loadFile.open(fileName);
	if(loadFile.is_open()) {
		string name, strYears, strDepartment;
		// read name, years, department into string variables
		while(getline(loadFile, name)) {
			getline(loadFile, strYears);
			getline(loadFile, strDepartment);

			// convert years to int
			int years = stoi(strYears);
			// convert department to departmentType
			departmentType dept = stoi(strDepartment) == 0 ? hr : it;

			// create new employee object based off department
			Container* newEmployee = new Container();
			Employee* employee;
			if (dept == hr) employee = new HR(name, years, dept);
			else if (dept == it) employee = new IT(name, years, dept);
			newEmployee->employee = employee;

			// add employee to end of linked list
			Container* tempList = list;
			newEmployee->next = 0;
			if(tempList == 0) {
				list = newEmployee;
			} else {
				while(tempList->next != 0) {
					tempList = tempList->next;
				}
				tempList->next = newEmployee;
			}
		}
		loadFile.close();
	}
}